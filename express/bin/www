#!/usr/bin/env node

/**
 * Module dependencies.
 */

const db = require('../models/db')
const cache = require('../models/cache')
const searchEngine = require('../models/search-engine')
const email = require('../models/email')
const { seedDummyData } = require('../models/comment')
const { initDemoData } = require('../models/demo-paginacija')
const app = require('../app')
const debug = require('debug')('termPortal:server')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

// Wait for all dependancy connections before seeding data and starting to serve requests.
;(async () => {
  await Promise.all([
    db.waitForConnection(),
    cache.waitForConnection(),
    searchEngine.waitForConnection(),
    email.waitForConnection()
  ])
  await searchEngine.initEntryIndex()
  await searchEngine.initConsultancyEntryIndex()
  seedDummyData()
  // initDemoData()
  server.listen(port)
})()

server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // Named pipe.
    return val
  }

  if (port >= 0) {
    // Port number.
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
